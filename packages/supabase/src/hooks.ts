import type { SupabaseClient } from '@supabase/supabase-js';
import type { RequestEvent } from '@sveltejs/kit';

import type { Database } from './database';
import type { Client } from './types';

import {
  createBrowserClient,
  createServerClient,
  isBrowser
} from '@supabase/ssr';

import { getSupabaseEnv } from './config';

type NativeFetch = typeof fetch;

export const createSupabaseServerClient = (
  event: RequestEvent,
  /**
   * Load the env variables from the `$env/dynamic/public` module, which is
   * autogenerated by svelte-kit
   */
  env: Record<string, string | undefined>
): Client => {
  const { supabaseAnonKey, supabaseUrl } = getSupabaseEnv(env);

  return createServerClient<Database>(supabaseUrl, supabaseAnonKey, {
    cookies: {
      getAll: () => event.cookies.getAll(),
      setAll: (cookiesToSet) => {
        cookiesToSet.forEach(({ name, options, value }) => {
          event.cookies.set(name, value, { ...options, path: '/' });
        });
      }
    }
  });
};

export const getSession = async <Schema extends keyof Database>(
  supabase: SupabaseClient<Database, Schema>
) => {
  const {
    data: { session }
  } = await supabase.auth.getSession();
  if (!session) {
    return { session: null, user: null };
  }

  const {
    data: { user },
    error
  } = await supabase.auth.getUser();
  if (error) {
    // JWT validation has failed
    return { session: null, user: null };
  }

  return { session, user };
};

type Cookies = { name: string; value: string }[];
export const createSupabaseClient = (
  fetch: NativeFetch,
  cookies: Cookies,
  env: Record<string, string | undefined>
) => {
  const { supabaseAnonKey, supabaseUrl } = getSupabaseEnv(env);

  return isBrowser()
    ? createBrowserClient<Database>(supabaseUrl, supabaseAnonKey, {
      global: { fetch }
    })
    : createServerClient<Database>(supabaseUrl, supabaseAnonKey, {
      cookies: {
        getAll() {
          return cookies;
        }
      },
      global: { fetch }
    });
};
